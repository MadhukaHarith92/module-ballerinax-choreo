import org.apache.tools.ant.taskdefs.condition.Os

/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

description = 'Ballerina - Choreo Extension Tests'

configurations {
    observabilityExtensions {
        transitive false
    }
    testUtils {
        transitive false
    }
}

dependencies {
    observabilityExtensions project(path: ':choreo-extension-ballerina', configuration: 'distribution')

    implementation "org.javassist:javassist:${javassistVersion}"

    testImplementation project(":choreo-extension-native")
    testImplementation "org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-test-utils:${ballerinaLangVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    testUtils "org.ballerinalang:ballerina-test-utils:${ballerinaLangVersion}"
}

def cleanUpBalProject (projectDir) {
    delete "${projectDir}/target"
    delete "${projectDir}/Ballerina.lock"
    delete "${projectDir}/ballerina-internal.log"
}

clean {
    def testBalProjectsDir = "${project.projectDir}/src/test/resources/bal"
    cleanUpBalProject "${testBalProjectsDir}/choreo_ext_test"
    def testMockPeriscopeProjectDir = "${testBalProjectsDir}/choreo_periscope_backend"
    cleanUpBalProject testMockPeriscopeProjectDir
    delete "${testMockPeriscopeProjectDir}/modules/handshake/handshake_pb.bal"
    delete "${testMockPeriscopeProjectDir}/modules/telemetry/telemetry_pb.bal"
}

jar {
    enabled = false
    manifest {
        attributes(
                'Premain-Class': 'io.ballerina.observe.choreo.test.DelayedShutdownAgent'
        )
    }
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
}

task unpackJballerinaTools(type: Copy, dependsOn: configurations.jbalTools) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${project.buildDir}/extracted-distributions", "jballerina-tools-zip")
    }
}

def unpackDistributions(distributionConfigurations) {
    distributionConfigurations.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        copy {
            from zipTree(artifact.getFile())
            into new File("${project.buildDir}/extracted-distributions", artifact.name + "-zip")
        }
    }
}

task unpackStdLibs(dependsOn: configurations.ballerinaStdLibs) {
    doLast {
        unpackDistributions configurations.ballerinaStdLibs
    }
}

task unpackExtensions(dependsOn: configurations.observabilityExtensions) {
    doLast {
        unpackDistributions configurations.observabilityExtensions
    }
}

def copyDistributions (distributionConfigurations) {
    copy {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        into "${project.buildDir}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"

        /* Standard Libraries */
        distributionConfigurations.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactExtractedPath = "${project.buildDir}/extracted-distributions/" + artifact.name + "-zip"
            into("bre/lib") {
                from "${artifactExtractedPath}/libs"
            }
            into("docs") {
                from "${artifactExtractedPath}/docs"
            }
            into("repo/bala") {
                from "${artifactExtractedPath}/bala"
            }
            into("repo/cache") {
                from "${artifactExtractedPath}/cache"
            }
        }
    }
}

task copyStdlibs {
    dependsOn unpackJballerinaTools
    dependsOn unpackStdLibs

    doLast {
        copyDistributions configurations.ballerinaStdLibs
    }
}

task copyExtensions {
    dependsOn unpackJballerinaTools
    dependsOn unpackExtensions

    doLast {
        copyDistributions configurations.observabilityExtensions
    }
}

task createServerZip(type: Zip) {
    dependsOn copyStdlibs
    dependsOn copyExtensions

    archiveFileName = "jballerina-tools-${ballerinaLangVersion}.zip"
    destinationDirectory = file("${buildDir}/repacked-distributions")
    from "${project.buildDir}/extracted-distributions/jballerina-tools-zip/"
}

def generateGrpcServer(protoFile, outputDir) {
    def protoNameMatcher = protoFile =~ /.*\\/([^\/]+)\.proto/
    def protoName = protoNameMatcher[0][1]
    protoFile = new File(protoFile).getAbsolutePath()   // Resolve absolute path

    def generatedSourcesDir = "${project.buildDir}/tmp/generated/sources/${protoName}"
    def distributionBinPath = "${project.buildDir.absolutePath}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
    exec {
        workingDir project.projectDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', "${distributionBinPath}/bal.bat grpc --input ${protoFile} --output ${generatedSourcesDir} --mode service && exit %%ERRORLEVEL%%"
        } else {
            commandLine 'sh', '-c', "${distributionBinPath}/bal grpc --input ${protoFile} --output ${generatedSourcesDir} --mode service"
        }
    }
    copy {
        from "${generatedSourcesDir}/${protoName}_pb.bal"
        into outputDir
    }
}

task generateChoreoGrpcTestBackend {
    dependsOn copyStdlibs
    finalizedBy ":commitTomlFiles"

    def protoFilesDir = "${project.projectDir}/../choreo-extension-native/src/main/proto"
    def choreoBackendModulesDir = "${project.projectDir}/src/test/resources/bal/choreo_periscope_backend/modules"
    doLast {
        delete "${project.projectDir}/src/test/resources/bal/choreo_periscope_backend/Dependencies.toml"

        generateGrpcServer("${protoFilesDir}/handshake.proto", "${choreoBackendModulesDir}/handshake")
        generateGrpcServer("${protoFilesDir}/telemetry.proto", "${choreoBackendModulesDir}/telemetry")
    }
}

test {
    dependsOn shadowJar
    dependsOn createServerZip
    dependsOn generateChoreoGrpcTestBackend

    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
    finalizedBy ":commitTomlFiles"

    testLogging {
        showStackTraces true
        showStandardStreams true
        events "failed"
        exceptionFormat "full"
    }

    systemProperty 'basedir', "${buildDir}"
    systemProperty 'libdir', "${buildDir}"
    systemProperty 'server.zip', createServerZip.outputs.files.singleFile
    systemProperty 'jballerina.server.zip', createServerZip.outputs.files.singleFile
    systemProperty 'java.util.logging.config.file', "${buildDir}/resources/test/logging.properties"
    systemProperty 'ballerina.agent.path', configurations.testUtils.asPath
    systemProperty 'choreo.ext.test.agent', shadowJar.archiveFile.get().getAsFile().getPath()
    useTestNG() {
        suites 'src/test/resources/testng.xml'
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            excludeGroups "linux-only"
        }
    }
}
