/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id "com.google.protobuf" version "0.9.4"
}

description = 'Ballerina - Choreo Extension - Native Module'

dependencies {
    implementation "org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}"
    implementation "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-context:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-trace:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-semconv:${openTelemetryAlphaVersion}"
    implementation "io.opentelemetry:opentelemetry-api-metrics:${openTelemetryAlphaVersion}"
    implementation "io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}"
    implementation "io.jaegertracing:jaeger-core:${jaegerVersion}"
    implementation("com.google.guava:guava:${guavaVersion}") {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation("com.google.guava:failureaccess:${failureAccessVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}") {
        exclude group: 'io.grpc', module: 'grpc-context'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation("io.grpc:grpc-stub:${grpcVersion}") {
        exclude group: 'io.grpc', module: 'grpc-context'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'

    }
    implementation("io.grpc:grpc-netty-shaded:${grpcVersion}") {
        exclude group: 'io.grpc', module: 'grpc-context'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation "javax.annotation:javax.annotation-api:1.3.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "choreo-extension-native"
            version = project.version
            artifact jar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task copyJavaClassFiles(type: Copy) {
    from("${project.buildDir}/classes") {
        exclude '**/module-info.class'
        include '**/*.class'
    }
    into "${project.rootDir.absolutePath}/build/classes"
    dependsOn(compileJava)
}
